
alias(Actor, silo.lang.Actor)

func(first(home : Actor) {

    next : Actor = actor.read() | checkcast(Actor)

    while(true {
        i : int = actor.read() | checkcast(Integer) # intValue()

        if(i == 1000000 {
            actor.sendRaw(home, "done")
        } else {
            actor.sendRaw(next, Integer(i + 1))
        })
    })
})

func(service(next : Actor, home : Actor) {
    while(true {
        i : int = actor.read() | checkcast(Integer) # intValue()

        if(i == 1000000 {
            actor.sendRaw(home, "done")
        } else {
            actor.sendRaw(next, Integer(i + 1))
        })
    })
})


startTime : long = System.nanoTime();

println("Starting.")

count : int = 1000

start : Actor = actor.spawnRaw(first, actor.selfRaw())
previous : Actor = start

i : int = count - 1
while(i > 0 {
    previous = actor.spawnRaw(service, previous, actor.selfRaw())

    i = i - 1
})

actor.sendRaw(start, previous)
actor.sendRaw(start, Integer(0))

actor.read()

estimatedTime : long = System.nanoTime() - startTime;
println("Total Duration: " + (estimatedTime / 1000000L));